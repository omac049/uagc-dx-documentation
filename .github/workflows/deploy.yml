name: üìö Deploy Documentation to GitHub Pages

on:
  push:
    branches: [main]
    paths:
      - 'new-docs/**'
      - 'static/**'
      - 'src/**'
      - 'docusaurus.config.js'
      - 'sidebars.js'
      - 'package*.json'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

# Security: Minimal required permissions
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Prevent concurrent deployments
concurrency:
  group: "pages-deployment"
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # üîç Pre-flight checks
  validate:
    name: üîç Validate & Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.force_deploy == 'true'
    
    outputs:
      should_deploy: ${{ steps.changes.outputs.docs_changed || github.event.inputs.force_deploy == 'true' }}
      cache_key: ${{ steps.cache_key.outputs.key }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need 2 commits to check for changes
          
      - name: üîç Check for documentation changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "docs_changed=true" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Manual workflow dispatch - proceeding with deployment"
          else
            # Check if any documentation-related files changed
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            if echo "$CHANGED_FILES" | grep -E '\.(md|mdx|js|json|yml|yaml|css|scss)$|^(new-docs|static|src)/'; then
              echo "docs_changed=true" >> $GITHUB_OUTPUT
              echo "üìù Documentation changes detected:"
              echo "$CHANGED_FILES" | grep -E '\.(md|mdx|js|json|yml|yaml|css|scss)$|^(new-docs|static|src)/' || true
            else
              echo "docs_changed=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No documentation changes detected - skipping deployment"
            fi
          fi
          
      - name: üèóÔ∏è Setup Node.js
        if: steps.changes.outputs.docs_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîë Generate cache key
        id: cache_key
        if: steps.changes.outputs.docs_changed == 'true'
        run: |
          HASH=$(echo "${{ hashFiles('package-lock.json', 'new-docs/**', 'static/**', 'docusaurus.config.js') }}" | sha256sum | cut -d' ' -f1)
          echo "key=${{ env.CACHE_VERSION }}-docs-$HASH" >> $GITHUB_OUTPUT
          
      - name: üì¶ Install dependencies
        if: steps.changes.outputs.docs_changed == 'true'
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci --prefer-offline --no-audit
          
      - name: üß™ Validate configuration
        if: steps.changes.outputs.docs_changed == 'true'
        run: |
          echo "üß™ Validating Docusaurus configuration..."
          npm run docusaurus -- --version
          
          echo "üîç Checking for broken internal links..."
          # Add any custom validation here
          echo "‚úÖ Configuration validation passed"

  # üèóÔ∏è Build documentation
  build:
    name: üèóÔ∏è Build Documentation
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    
    outputs:
      build_size: ${{ steps.build_info.outputs.size }}
      build_time: ${{ steps.build_info.outputs.time }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better build optimization
          
      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì¶ Install dependencies
        run: |
          echo "üì¶ Installing dependencies with optimizations..."
          npm ci --prefer-offline --no-audit --production=false
          
      - name: üîß Build website
        run: |
          echo "üîß Building Docusaurus site..."
          START_TIME=$(date +%s)
          
          # Build with optimizations
          NODE_ENV=production npm run build
          
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "‚è±Ô∏è Build completed in ${BUILD_TIME} seconds"
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
          
      - name: üìä Build information
        id: build_info
        run: |
          BUILD_SIZE=$(du -sh build | cut -f1)
          echo "size=${BUILD_SIZE}" >> $GITHUB_OUTPUT
          echo "time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          
          echo "üìä Build Statistics:"
          echo "   Size: ${BUILD_SIZE}"
          echo "   Time: ${BUILD_TIME}s"
          echo "   Files: $(find build -type f | wc -l)"
          
      - name: üîç Validate build output
        run: |
          echo "üîç Validating build output..."
          
          # Check critical files exist
          test -f build/index.html || { echo "‚ùå Missing index.html"; exit 1; }
          test -f build/sitemap.xml || { echo "‚ö†Ô∏è Missing sitemap.xml" ; }
          test -d build/js || { echo "‚ùå Missing js directory"; exit 1; }
          
          # Check for our custom search files
          test -f build/js/custom-search.js || { echo "‚ùå Missing custom-search.js"; exit 1; }
          
          echo "‚úÖ Build validation passed"
          
      - name: üóúÔ∏è Optimize build
        run: |
          echo "üóúÔ∏è Optimizing build for deployment..."
          
          # Remove unnecessary files
          find build -name "*.map" -type f -delete 2>/dev/null || true
          find build -name ".DS_Store" -type f -delete 2>/dev/null || true
          
          echo "‚úÖ Build optimization completed"
          
      - name: üì§ Setup Pages
        uses: actions/configure-pages@v4
        
      - name: üì§ Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build
          retention-days: 1

  # üöÄ Deploy to GitHub Pages
  deploy:
    name: üöÄ Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should_deploy == 'true'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000 # 10 minutes timeout
          
      - name: üìä Deployment summary
        run: |
          echo "## üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìç **Website URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **Build Size:** ${{ needs.build.outputs.build_size }}" >> $GITHUB_STEP_SUMMARY
          echo "‚è±Ô∏è **Build Time:** ${{ needs.build.outputs.build_time }}s" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Commit:** [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß What's Included:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Enhanced search with compact pagination" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Mobile-optimized responsive design" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Dark/light theme support" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ WCAG 2.1 AA accessibility compliance" >> $GITHUB_STEP_SUMMARY

  # üß™ Post-deployment verification
  verify:
    name: üß™ Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: üîç Verify website accessibility
        run: |
          echo "üîç Verifying deployment..."
          
          # Get site URL with fallback
          SITE_URL="${{ needs.deploy.outputs.page_url }}"
          if [ -z "$SITE_URL" ]; then
            SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            echo "‚ö†Ô∏è Using fallback URL: $SITE_URL"
          else
            echo "üìç Using deployment URL: $SITE_URL"
          fi
          
          # Wait for deployment to propagate
          echo "‚è≥ Waiting for deployment to propagate..."
          sleep 30
          
          # Enhanced connectivity test with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üîÑ Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES: Testing $SITE_URL"
            
            if curl -f -s -I "$SITE_URL" > /dev/null; then
              echo "‚úÖ Website is accessible at $SITE_URL"
              
              # Test a few key pages
              echo "üß™ Testing key pages..."
              if curl -f -s "$SITE_URL" | grep -q "UAGC DX Documentation"; then
                echo "‚úÖ Homepage content verified"
              else
                echo "‚ö†Ô∏è Homepage content check inconclusive"
              fi
              
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚è≥ Retrying in 15 seconds..."
                sleep 15
              fi
            fi
          done
          
          echo "‚ùå Website accessibility check failed after $MAX_RETRIES attempts"
          echo "üîç Debugging info:"
          echo "- Repository: ${{ github.repository }}"
          echo "- URL tested: $SITE_URL"
          curl -v "$SITE_URL" || true
          exit 1
          
      - name: üìù Create deployment report
        run: |
          echo "## üìã Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Status:** Deployment verified successfully" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ **Deployed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Environment:** Production (GitHub Pages)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üß™ Tests Performed:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Website accessibility check" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Core functionality verification" >> $GITHUB_STEP_SUMMARY
